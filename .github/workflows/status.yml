name: Status=Expired on close with label

on:
  issues:
    types: [closed, labeled]

permissions:
  issues: write
  contents: read
  pull-requests: read
  # ВАЖНО: нужно право на Projects (для org-проекта иногда требуется PAT).
  # Если GITHUB_TOKEN не хватает, создай секрет ORG_PAT с classic PAT (repo, read:org, project).
  # Тогда ниже заменишь token: ${{ secrets.ORG_PAT }}

jobs:
  set-expired:
    if: >
      github.event.issue.state == 'closed' ||
      (github.event.action == 'labeled' && github.event.label.name == 'expired' && github.event.issue.state == 'closed')
    runs-on: ubuntu-latest
    steps:
      - name: Ensure "expired" label present and issue closed
        id: guard
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const issue = context.payload.issue;
            const hasExpired = issue.labels.some(l => (typeof l === 'string' ? l : l.name).toLowerCase() === 'expired');
            const isClosed = issue.state === 'closed';
            core.setOutput('ok', (hasExpired && isClosed) ? 'true' : 'false');

      - name: Exit if not closed+expired
        if: steps.guard.outputs.ok != 'true'
        run: echo "Skip - not closed+expired"

      - name: Set Status=Expired in org Project #1
        if: steps.guard.outputs.ok == 'true'
        uses: actions/github-script@v7
        with:
          # если нужен PAT, раскомментируй и добавь token: ${{ secrets.ORG_PAT }}
          # token: ${{ secrets.ORG_PAT }}
          script: |
            const org = 'fra1m-dev';              // <-- твоя организация
            const projectNumber = 1;              // <-- Project #1
            const issueNodeId = context.payload.issue.node_id;

            // 1) Берём id проекта и поле Status (+ опция Expired)
            const projQ = `query($org:String!, $num:Int!) {
              organization(login:$org){
                projectV2(number:$num){
                  id
                  fields(first:50){
                    nodes{
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options { id name }
                      }
                    }
                  }
                }
              }
            }`;
            const proj = await github.graphql(projQ, { org, num: projectNumber });
            const project = proj.organization.projectV2;
            if(!project) core.setFailed(`Project #${projectNumber} not found in ${org}`);

            const statusField = project.fields.nodes.find(f => f && f.name === 'Status');
            if(!statusField) core.setFailed('Status field not found');

            const expiredOpt = statusField.options.find(o => o.name.toLowerCase() === 'expired');
            if(!expiredOpt) core.setFailed('Status option "Expired" not found');

            // 2) Проверяем, есть ли item для этого issue в проекте
            const findItemQ = `query($issue:ID!, $proj:ID!){
              node(id:$issue){
                ... on Issue {
                  projectItems(first:20){
                    nodes{ id project{... on ProjectV2 {id} } }
                  }
                }
              }
            }`;
            const found = await github.graphql(findItemQ, { issue: issueNodeId, proj: project.id });
            const items = found.node.projectItems.nodes.filter(n => n.project?.id === project.id);
            let itemId = items[0]?.id;

            // 3) Если нет — добавляем
            if(!itemId){
              const addM = `mutation($proj:ID!, $issue:ID!){
                addProjectV2ItemById(input:{projectId:$proj, contentId:$issue}){ item { id } }
              }`;
              const added = await github.graphql(addM, { proj: project.id, issue: issueNodeId });
              itemId = added.addProjectV2ItemById.item.id;
            }

            // 4) Обновляем поле Status -> Expired
            const updM = `mutation($proj:ID!, $item:ID!, $field:ID!, $opt: String!){
              updateProjectV2ItemFieldValue(input:{
                projectId:$proj,
                itemId:$item,
                fieldId:$field,
                value:{ singleSelectOptionId:$opt }
              }){ projectV2Item { id } }
            }`;
            await github.graphql(updM, {
              proj: project.id,
              item: itemId,
              field: statusField.id,
              opt: expiredOpt.id
            });
            core.info('Status set to "Expired" ✅');
